!(function (a, b) { if (typeof define === "function" && define.amd) { define(["jquery"], b) } else { if (typeof exports === "object") { b(require("jquery")) } else { b(a.jQuery) } } })(this, function (f) { var d = "vide"; var c = { volume: 1, playbackRate: 1, muted: true, loop: true, autoplay: true, position: "50% 50%", posterType: "detect", resizing: true }; function a(q) { var l = {}; var m; var n; var h; var j; var o; var p; var k; o = q.replace(/\s*:\s*/g, ":").replace(/\s*,\s*/g, ",").split(","); for (k = 0, p = o.length; k < p; k++) { n = o[k]; if (n.search(/^(http|https|ftp):\/\//) !== -1 || n.search(":") === -1) { break } m = n.indexOf(":"); h = n.substring(0, m); j = n.substring(m + 1); if (!j) { j = undefined } if (typeof j === "string") { j = j === "true" || (j === "false" ? false : j) } if (typeof j === "string") { j = !isNaN(j) ? +j : j } l[h] = j } if (h == null && j == null) { return q } return l } function e(n) { n = "" + n; var l = n.split(/\s+/); var k = "50%"; var o = "50%"; var j; var h; var m; for (m = 0, j = l.length; m < j; m++) { h = l[m]; if (h === "left") { k = "0%" } else { if (h === "right") { k = "100%" } else { if (h === "top") { o = "0%" } else { if (h === "bottom") { o = "100%" } else { if (h === "center") { if (m === 0) { k = "50%" } else { o = "50%" } } else { if (m === 0) { k = h } else { o = h } } } } } } } return { x: k, y: o } } function g(i, j) { var h = function () { j(this.src) }; f('<img src="' + i + '.jpg">').load(h) } function b(k, l, h) { this.$element = f(k); if (typeof l === "string") { l = a(l) } if (!h) { h = {} } else { if (typeof h === "string") { h = a(h) } } if (typeof l === "string") { l = l.replace(/\.\w*$/, "") } else { if (typeof l === "object") { for (var j in l) { if (l.hasOwnProperty(j)) { l[j] = l[j].replace(/\.\w*$/, "") } } } } this.settings = f.extend({}, c, h); this.path = l; this.init() } b.prototype.init = function () { var j = this; var h = e(j.settings.position); var i = ""; var k; j.$wrapper = f("<div>").css({ position: "absolute", "z-index": 0, top: 0, left: 0, bottom: 0, right: 0, overflow: "hidden", "-webkit-background-size": "cover", "-moz-background-size": "cover", "-o-background-size": "cover", "background-size": "cover", "background-repeat": "no-repeat", "background-position": h.x + " " + h.y }); k = j.path; if (typeof j.path === "object") { if (j.path.poster) { k = j.path.poster } else { if (j.path.mp4) { k = j.path.mp4 } else { k = j.path.poster } } } if (j.settings.posterType === "detect") { g(k, function (l) { j.$wrapper.css("background-image", "url(" + l + ")") }) } else { if (j.settings.posterType !== "none") { j.$wrapper.css("background-image", "url(" + k + "." + j.settings.posterType + ")") } } if (j.$element.css("position") === "static") { j.$element.css("position", "relative") } j.$element.prepend(j.$wrapper); if (typeof j.path === "object") { i += '<source src="' + j.path.mp4 + '.mp4" type="video/mp4">'; j.$video = f("<video>" + i + "</video>") } else { j.$video = f('<video><source src="' + j.path + '.mp4" type="video/mp4"></video>') } j.$video.prop({ autoplay: j.settings.autoplay, loop: j.settings.loop, volume: j.settings.volume, muted: j.settings.muted, defaultMuted: j.settings.muted, playbackRate: j.settings.playbackRate, defaultPlaybackRate: j.settings.playbackRate }).css({ margin: "auto", position: "absolute", "z-index": 0, top: h.y, left: h.x, "-webkit-transform": "translate(-" + h.x + ", -" + h.y + ")", "-ms-transform": "translate(-" + h.x + ", -" + h.y + ")", "-moz-transform": "translate(-" + h.x + ", -" + h.y + ")", transform: "translate(-" + h.x + ", -" + h.y + ")", visibility: "hidden" }).one("canplaythrough." + d, function () { j.resize() }).one("playing." + d, function () { j.$video.css("visibility", "visible"); j.$wrapper.css("background-image", "none") }); j.$element.on("resize." + d, function () { if (j.settings.resizing) { j.resize() } }); j.$wrapper.append(j.$video) }; b.prototype.getVideoObject = function () { return this.$video[0] }; b.prototype.resize = function () { if (!this.$video) { return } var i = this.$video[0].videoHeight; var k = this.$video[0].videoWidth; var j = this.$wrapper.height(); var h = this.$wrapper.width(); if (h / k > j / i) { this.$video.css({ width: h + 2, height: "auto" }) } else { this.$video.css({ width: "auto", height: j + 2 }) } }; b.prototype.destroy = function () { this.$element.off(d); if (this.$video) { this.$video.off(d) } delete f[d].lookup[this.index]; this.$element.removeData(d); this.$wrapper.remove() }; f[d] = { lookup: [] }; f.fn[d] = function (j, i) { var h; this.each(function () { h = f.data(this, d); if (h) { h.destroy() } h = new b(this, j, i); h.index = f[d].lookup.push(h) - 1; f.data(this, d, h) }); return this }; f(document).ready(function () { var h = f(window); h.on("resize." + d, function () { for (var k = f[d].lookup.length, l = 0, j; l < k; l++) { j = f[d].lookup[l]; if (j && j.settings.resizing) { j.resize() } } }); h.on("unload." + d, function () { return false }); f(document).find("[data-" + d + "-bg]").each(function (m, l) { var j = f(l); var k = j.data(d + "-options"); var n = j.data(d + "-bg"); j[d](n, k) }) }) });